name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  CHROMA_VERSION: '0.4.24'

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/startrek-rag
          ${{ secrets.DOCKERHUB_USERNAME }}/content-loader
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push RAG application
      uses: docker/build-push-action@v5
      with:
        context: ./startrek-rag
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push content loader
      uses: docker/build-push-action@v5
      with:
        context: ./content_loader
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create release artifacts
      run: |
        mkdir -p release-artifacts
        
        # Create Docker Compose file for release
        cat > release-artifacts/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          app:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/startrek-rag:latest
            ports:
              - "8080:8080"
            environment:
              - CHROMA_HOST=chroma
              - CHROMA_PORT=8000
              - COLLECTION_NAME=startrek
            depends_on:
              - chroma
            networks:
              - startrek-network
              
          chroma:
            image: chromadb/chroma:${{ env.CHROMA_VERSION }}
            ports:
              - "8000:8000"
            volumes:
              - chroma_data:/chroma/chroma
            networks:
              - startrek-network
              
        volumes:
          chroma_data:
            
        networks:
          startrek-network:
            driver: bridge
        EOF
        
        # Create README for release
        cat > release-artifacts/README.md << 'EOF'
        # Star Trek RAG LLM System - Release Package
        
        This release contains the Docker images and configuration for the Star Trek RAG LLM system.
        
        ## Quick Start
        
        1. Ensure Docker and Docker Compose are installed
        2. Run: `docker compose up -d`
        3. Access the API at: http://localhost:8080
        4. Check health: http://localhost:8080/api/health
        
        ## Images
        
        - `startrek-rag`: Main RAG application
        - `content-loader`: Content processing service
        - `chromadb/chroma`: Vector database
        
        ## Documentation
        
        For full documentation, visit the GitHub repository.
        EOF
        
        # Create version file
        echo "${{ github.event.release.tag_name }}" > release-artifacts/VERSION
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: release-artifacts/
        retention-days: 30
        
    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: release-artifacts/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-release:
    name: Test Release Images
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test RAG application image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/startrek-rag:latest
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/startrek-rag:latest python -c "import sys; print('Python version:', sys.version)"
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/startrek-rag:latest python -c "from app import create_app; print('✅ App imports successfully')"
        
    - name: Test content loader image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/content-loader:latest
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/content-loader:latest python -c "import sys; print('Python version:', sys.version)"
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/content-loader:latest python -c "from enhanced_processor import EnhancedContentProcessor; print('✅ Content loader imports successfully')"
        
    - name: Test Docker Compose
      run: |
        # Create a test compose file
        cat > test-compose.yml << EOF
        version: '3.8'
        services:
          app:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/startrek-rag:latest
            ports:
              - "8080:8080"
            environment:
              - CHROMA_HOST=chroma
              - CHROMA_PORT=8000
            depends_on:
              - chroma
          chroma:
            image: chromadb/chroma:${{ env.CHROMA_VERSION }}
            ports:
              - "8000:8000"
        EOF
        
        # Test the compose file
        docker compose -f test-compose.yml config
        echo "✅ Docker Compose configuration is valid"

  build-architecture-diagrams:
    name: Build Architecture Diagrams
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install PlantUML dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Generate diagrams
        run: |
          cd docs
          chmod +x generate_diagrams.sh
          ./generate_diagrams.sh

      - name: Upload architecture diagrams
        uses: actions/upload-artifact@v4
        with:
          name: architecture-diagrams
          path: docs/images/*.png 